agent:
  # Set home to tests directory so data paths resolve to tests/data instead of ~/.datus/data
  # Using relative path for portability across different environments
  home: tests
  target: deepseek
  models:
    deepseek:
      type: deepseek
      vendor: deepseek
      base_url: https://api.deepseek.com
      api_key: ${DEEPSEEK_API_KEY}
      model: deepseek-chat
    deepseek-r1:
      type: deepseek
      vendor: deepseek
      base_url: https://api.deepseek.com
      api_key: ${DEEPSEEK_API_KEY}
      model: deepseek-reasoner
      enable_thinking: true
    deepseek-ark:
      type: deepseek
      vendor: ark
      base_url: https://ark.cn-beijing.volces.com/api/v3
      api_key: ${DEEPSEEK_ARK_API_KEY}
      model: deepseek-v3-250324
    qwen:
      type: qwen
      base_url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api_key: ${DASHSCOPE_API_KEY}
      model: qwen3-coder-plus
    dashscope:
      type: dashscope
      base_url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api_key: ${DASHSCOPE_API_KEY}
      model: qwen-plus
    anthropic:
      type: claude
      vendor: anthropic
      base_url: https://api.anthropic.com
      api_key: ${ANTHROPIC_API_KEY}
      #model: claude-3-7-sonnet-latest
      model: claude-sonnet-4-20250514
    kimi-k2:
      type: openai
      vendor: openai
      base_url: https://api.moonshot.cn/v1
      api_key: ${KIMI_API_KEY}
      model: kimi-k2-0711-preview
    openai-4o-mini:
      type: openai
      vendor: openai
      base_url: https://api.openai.com/v1
      api_key: ${OPENAI_API_KEY}
      model: gpt-4o-mini
    gemini-2.5:
      type: gemini
      vendor: google
      base_url: https://generativelanguage.googleapis.com/v1beta
      api_key: ${GEMINI_API_KEY}
      model: gemini-2.5-flash-lite
      enable_thinking: true

  nodes:
    schema_linking:
      model: deepseek
      matching_rate: fast
      prompt_version: "1.0"
    generate_sql:
      model: deepseek
      prompt_version: "1.0"
      max_table_schemas_length: 10000
      max_data_details_length: 8000
      max_context_length: 8000
      max_value_length: 500
    reasoning:
      model: deepseek
      prompt_version: "1.0"
      max_table_schemas_length: 10000
      max_data_details_length: 8000
      max_context_length: 8000
      max_value_length: 500
      max_turns: 20
    reflect:
      prompt_version: "2.1"
    output:
      prompt_version: "1.0"
      check_result: true
  agentic_nodes:
    chatbot:
      model: deepseek
      system_prompt: gen_sql
      prompt_version: "1.0"
      prompt_language: en
      tools: db_tools.*, context_search_tools.*
      mcp: filesystem_mcp.*
      agent_description: "You are a specialized AI assistant for SQL generation"
      rules:
        - Use filesystem tools to read SQL files from the current directory (*/*.sql) as reference examples
        - When SQL is involved, explain your approach and provide clear, executable queries
        - Always check reference SQL files(*.sql) in allowed directory for similar patterns before writing new queries
        - If context is provided, use the tables/metrics/sqls in user prompt
        - Try to use database specific dialect
  schema_linking_rate: medium

  # Benchmark data is stored at {agent.home}/benchmark/{name}
  # Supported benchmarks: bird_dev, spider2, semantic_layer

  # local databases configuration
  namespace:
    bird_sqlite:
      type: sqlite
      path_pattern: ~/benchmark/bird/dev_20240627/dev_databases/**/*.sqlite # just support glob pattern
    bird_school:
      name: california_schools
      type: sqlite
      uri: ~/benchmark/bird/dev_20240627/dev_databases/california_schools/california_schools.sqlite # just support glob pattern
    duckdb:
      type: duckdb
      name: duck
      uri: tests/data/datus_metricflow_db/duck.db # absolute path: sqlite:////full/path/to/example.db
    ssb_sqlite:
      type: sqlite
      name: SSB
      uri: tests/data/SSB.db
    snowflake:
      type: snowflake
      account: ${SNOWFLAKE_ACCOUNT}
      username: ${SNOWFLAKE_USERNAME}
      password: ${SNOWFLAKE_PASSWORD}

    starrocks:
      type: starrocks
      host: ${STARROCKS_HOST}
      port: ${STARROCKS_PORT}
      username: ${STARROCKS_USER}
      password: ${STARROCKS_PASSWORD}
      database: ${STARROCKS_DATABASE}

  storage:
    base_path: data
    embedding_device_type: cpu
