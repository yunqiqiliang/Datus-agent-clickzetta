agent:
  target: qwen_main
  models:
    qwen_main:
      type: qwen
      vendor: aliyun
      base_url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api_key: ${DASHSCOPE_API_KEY}
      model: qwen-plus
      enable_thinking: false

    qwen_reasoning:
      type: qwen
      vendor: aliyun
      base_url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api_key: ${DASHSCOPE_API_KEY}
      model: qwen3-max
      enable_thinking: true

    deepseek_chat:
      type: deepseek
      vendor: deepseek
      base_url: https://api.deepseek.com
      api_key: ${DEEPSEEK_API_KEY}
      model: deepseek-chat

  nodes:
    schema_linking:
      model: deepseek_chat
      matching_rate: fast
      prompt_version: "1.0"

    generate_sql:
      model: qwen_main
      prompt_version: "1.0"
      max_table_schemas_length: 6000
      max_data_details_length: 4000
      max_context_length: 8000
      max_value_length: 500

    reasoning:
      model: qwen_reasoning
      prompt_version: "1.0"
      max_table_schemas_length: 6000
      max_data_details_length: 4000
      max_context_length: 8000
      max_value_length: 500
      max_turns: 20

    reflect:
      prompt_version: "2.1"

    output:
      prompt_version: "1.0"
      check_result: true

  agentic_nodes:
    chatbot:
      model: qwen_main
      system_prompt: gen_sql
      prompt_version: "1.0"
      prompt_language: zh
      max_turns: 15
      tools: db_tools.*, context_search_tools.*
      agent_description: "专注 Clickzetta 工作区的 SQL 助手"
      rules:
        - 当涉及 SQL 查询时务必说明思路并返回可执行语句
        - 优先使用 Clickzetta 工作区 quick_start 内的对象

  schema_linking_rate: medium

  namespace:
    # Default ClickZetta environment
    clickzetta:
      type: clickzetta
      service: ${CLICKZETTA_SERVICE}
      username: ${CLICKZETTA_USERNAME}
      password: ${CLICKZETTA_PASSWORD}
      instance: ${CLICKZETTA_INSTANCE}
      workspace: ${CLICKZETTA_WORKSPACE}
      schema: ${CLICKZETTA_SCHEMA}
      vcluster: ${CLICKZETTA_VCLUSTER}
      secure: false

    # Example: Additional ClickZetta environments
    # Uncomment and configure as needed for multiple workspaces
    #
    # clickzetta_dev:
    #   type: clickzetta
    #   service: ${CLICKZETTA_DEV_SERVICE}
    #   username: ${CLICKZETTA_DEV_USERNAME}
    #   password: ${CLICKZETTA_DEV_PASSWORD}
    #   instance: ${CLICKZETTA_DEV_INSTANCE}
    #   workspace: ${CLICKZETTA_DEV_WORKSPACE}
    #   schema: ${CLICKZETTA_DEV_SCHEMA}
    #   vcluster: ${CLICKZETTA_DEV_VCLUSTER}
    #   secure: false
    #
    # clickzetta_prod:
    #   type: clickzetta
    #   service: ${CLICKZETTA_PROD_SERVICE}
    #   username: ${CLICKZETTA_PROD_USERNAME}
    #   password: ${CLICKZETTA_PROD_PASSWORD}
    #   instance: ${CLICKZETTA_PROD_INSTANCE}
    #   workspace: ${CLICKZETTA_PROD_WORKSPACE}
    #   schema: ${CLICKZETTA_PROD_SCHEMA}
    #   vcluster: ${CLICKZETTA_PROD_VCLUSTER}
    #   secure: true

  # External Semantic Model Files Integration Configuration
  external_semantic_files:
    # Enable external semantic model file integration
    enabled: true

    # Storage provider type
    storage_provider: "volume"  # volume, stage, s3, local

    # General settings
    auto_import: true           # Auto-import files on startup
    sync_on_startup: true       # Sync files when agent starts
    file_patterns:              # File patterns to include
      - "*.yml"
      - "*.yaml"

    # ClickZetta Volume configuration
    provider_config:
      volume_type: "user"       # "user" or "named"
      volume_name: "semantic_models"  # Used when volume_type="named"
      volume_path: "/semantic_models" # Path within volume

    # Example: Named Volume configuration
    # provider_config:
    #   volume_type: "named"
    #   volume_name: "team_semantic_models"
    #   volume_path: "/models/v1/"

  storage:
    embedding_device_type: cpu

  workflow:
    plan: reflection
